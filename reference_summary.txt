keyword-based script/keyword-based test case representa tion: a machine-readable Script that includes only steps which are each respectively in the form of a tuple; each tuple must include at least an action and a target and may further include a data value; a keyword-based test case representation is a keyword-based script that includes at least one end-to-end test for a complete piece of target software; while keyword based scripts may be generated for use with any kind of target software, at least some preferred embodiments of the present invention are directed to generation of keyword-based scripts for use with applications that run on browsers, and herein these are more specifically referred to as browser-application keyword-based scripts; at least some preferred embodiments of the present invention are directed to generation of key word-based scripts that require a test driver to run the Script, and herein these are more specifically referred to as test driver-run keyword based scripts. machine-readable Script/machine-readable test case repre sentation: a set of machine readable instructions for the test ing of software that can be read and performed by a computer with no human intervention; some machine-readable scripts US 9,038,026 B2 23 may require intervening software for their performance, Such as a custom interpretation engine or a test driver; a machine readable test case representation is herein defined as a machine-readable script that includes at least one end-to-end test for a piece of target software; while machine-readable Scripts may be generated for use with any kind of target software, at least some preferred embodiments of the present invention are directed to generation of machine-readable Scripts for use with applications that run on browsers, and herein these are more specifically referred to as browser application machine-readable scripts. Algorithm3 follows: 1: if sslist.size() == index then f/Proceed to the next segment 3: return HandleSegList(seglist, Segindex + 1) 4: end if 10 15 25 30 35 40 45 50 55 60 65 16 -continued 5: SS scriptstep = s.slistindex 6: List<SS>dislist = DisambiguateTarget(atuple) 7: for all SS localsse dislist do 8: ret = InterpretStep(localss) 9: ifret == SUCCESS then 10: f/Proceed to the next ATD tuple 11: ret = Execute ATDList(seglist, segindex, Sslist, index + 1) 12: ifret == SUCCESS then 13: return SUCCESS 14: end if 15: end if 16: . Each of the seglists contains numbered steps (for example, step 4.1.1); An index for these numbered steps follows: (4) (4.1.1) (4.1.2) (4.1.3) (4.2.1) (4.2.2) (4.3.1) (4.3.2) (4.4.1) (5.1.1) (5.1.2) (5.2.1) enter login and password, and click login enter login password click login enter login password, and click login enter login and password click login enter login and password, and click login enter quantity “1” click on “Add to Shopping Cart' button enter quantity 1 and click on ... button Below it will be discussed how Algorithms 1, 2 and 3 work through the process flow of flowchart 400.